# setup 
```{r}
library(tidyverse)
library(readr)
library(dplyr)
library(randomForest)
library(tidymodels)
library(skimr)
library(parsnip)
library(vip)
library(ggplot2)
```

# loading data 
```{r}
tester <- read.csv("data/daymet/finalWeatherandRegions.csv")
```

# wrangling data
 ```{r}
 field_data <- tester %>%
  mutate_if(is.character, as.factor) %>%
  dplyr::select(-irrigation) %>%
  drop_na()

```

# splitting data 
```{r}
set.seed(123)
# Put 80% of the data into the training set 
data_split <- initial_split(field_data, strata = "str_emmean", prop = 0.80)
# Create data frames for the two sets:
train_data <- training(data_split)
test_data  <- testing(data_split) 

```

# USING varImp() 
## MONTHLY MODEL 
```{r}
# random forest 
months <- train_data %>%
  dplyr::select(c(srad_mean_April:prcp_sum_November), str_emmean, state, region, year)
  # year was at the top for varimp s

set.seed(123)
rf_mod <- randomForest(
  x = dplyr::select(months, -str_emmean),
  y = months$str_emmean,
  mtry = 4,
  ntree = 100,
  importance = TRUE
)

# returning variable imporantance (most important -> least)
varImp_monthly_withYear <- varImp(rf_mod) %>%
  as.data.frame() %>% 
  tibble::rownames_to_column(var = "variable") %>% 
  arrange(desc(Overall))# overall is average importance across all trees 

top5 <- head(varImp, 5)

# plot 
varImpPlot(rf_mod, type=2, main = "Variable Importance Plot: Monthly")
# plot showing %IncMSE & IncNodePurity
varImpPlot(rf_mod , sort = TRUE , n.var=10 , main = "Variable Importance: Monthly" )


##### REMOVE YEAR ############# 
months_noyear <- train_data %>%
  dplyr::select(c(srad_mean_April:prcp_sum_November), str_emmean, state, region)

set.seed(123)
rf_noyear <- randomForest(
    x = dplyr::select(months_noyear, -str_emmean),
    y = months$str_emmean,
    mtry=4,
    ntree=100,
    importance = TRUE
)

varImp_monthly <- varImp(rf_noyear) %>%
  as.data.frame() %>% 
  tibble::rownames_to_column(var = "variable") %>% 
  arrange(desc(Overall)) 

 ```



## AFTER REMOVING YEAR: ALL TEMPORAL SCALES
```{r}
set.seed(123)
preds <- train_data %>%
  dplyr::select(-loc, -year)

set.seed(123)
rf_all_mod <- randomForest(
  x = dplyr::select(preds, -str_emmean),
  y = preds$str_emmean,
  mtry = 4,
  ntree = 100,
  importance = TRUE
)

# returning variable imporantance (most important -> least)
varImp_entireScale <- varImp(rf_all_mod) %>%
  as.data.frame() %>% 
  tibble::rownames_to_column(var = "variable") %>% 
  arrange(desc(Overall))# overall is average importance across all trees 

# plot 
varImpPlot(rf_all_mod, type=2, main="Variable Importance: All Temporal Scales")
# plot showing %IncMSE & IncNodePurity
varImpPlot(rf_all_mod , sort = TRUE , n.var=10 , main = "Variable Importance: All Temporal Scales" )

# similarities with monthly and temporal 
# 2/8 srad_mean_April, 6/10 tamp_mean_September, 7/2 tamp_mean_July, 8/6 tmin_mean_September, 
# negative variable importance means that variable does not have a role in the prediction (not important)
# srad_mean_May, region
```


# using vip() from parsnip package 
```{r}
# random forest 
set.seed(123)
rf_parsnip <- rand_forest(mode = "regression",  mtry = 90, trees = 35)
```

## monthly
```{r}
# with year just to see how much impact year has on varImp
set.seed(123)
rf_monthly_fit <- rf_parsnip %>%
  set_engine("randomForest") %>%
  fit_xy(
    x = dplyr::select(months, -str_emmean),
    y = months$str_emmean # resuse months 
  )

vip_monthly_withYear <- vip(rf_monthly_fit) %>%
  .$data %>%
  arrange(desc(Importance))

# remove year 
set.seed(123)
rf_monthly_fit_noyear <- rf_parsnip %>%
  set_engine("randomForest") %>%
  fit_xy(
    x = dplyr::select(months_noyear, -str_emmean),
    y = months$str_emmean 
  )

vip_monthly <- vip(rf_monthly_fit_noyear) %>%
  .$data %>%
  arrange(desc(Importance))

```

# entire temporal scale
```{r}
set.seed(123)
rf_entirescale_fit <-  rf_parsnip %>%
  set_engine("randomForest") %>%
  fit_xy(
    x = dplyr::select(preds, -str_emmean),
    y = preds$str_emmean
  )

vip_entireScale <- vip(rf_entirescale_fit) %>%
    .$data %>%
    arrange(desc(Importance))

# only similar varImp was dayl_mean_September for both varImp() monthly/entirescale 
```

# comparing common variables # check ggplots and summaries
# varImp_all and varImp_noyear 
```{r}
# find common weather variables between varImp_all and varImp_noyear 
varImp_common <- varImp_entireScale$variable[1:10] %>%
  intersect(varImp_monthly$variable[1:10])

varImp_data <- train_data %>% # check this part? 
  select(all_of(varImp_common), str_emmean)

ggplot(varImp_data, aes(x = tmin_mean_September, y = str_emmean)) +
  geom_point() +
  labs(x = "tmin_mean_September", y = "str_emmean") +
  ggtitle("Relationship between tmin_mean_September and Target Variable")

model <- lm(str_emmean ~ ., data = varImp_data)
summary(model)
```


# Vip
```{r}
vip_common <- vip_monthly$Variable[1:10] %>%
  intersect(vip_entireScale$Variable[1:10])

vip_data <- train_data %>%
  select(all_of(vip_common), str_emmean)

ggplot(vip_data, aes(x = tamp_mean_July, y = str_emmean)) +
  geom_point() +
  labs(x = "tamp_mean_July", y = "str_emmean") +
  ggtitle("Relationship between tamp_mean_July and Target Variable")

```